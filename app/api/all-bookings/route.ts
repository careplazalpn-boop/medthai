import { NextResponse } from "next/server";
import pool from "../dbconnection/db";

// üß© ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
async function updateBookingStatus(status: string, bookingId: string | number) {
  await pool.execute("UPDATE bookings SET status = ? WHERE id = ?", [status, bookingId]);
}

// üß† GET: ‡∏î‡∏∂‡∏á bookings ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination + filter + summary
export async function GET(req: Request) {
  try {
    const url = new URL(req.url);
    // --- Pagination ---
    let page = parseInt(url.searchParams.get("page") || "1"); // üëà ‡πÉ‡∏ä‡πâ let ‡πÅ‡∏ó‡∏ô const
    const limit = parseInt(url.searchParams.get("limit") || "20");
    const isExport = url.searchParams.get("export") === "true";

    // --- Filters ---
    const filterDate = url.searchParams.get("date") || "";
    const filterTimeSlot =
      url.searchParams.get("timeSlot") ||
      url.searchParams.get("timeslot") ||
      url.searchParams.get("timeSlots") || // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà frontend ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
      "";

    const filterProvider = url.searchParams.get("provider") || "";
    const filterTherapist = url.searchParams.get("therapist") || "";
    const filterStatus = url.searchParams.get("status") || "";

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏î ‡πÜ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï page = 1

    const offset = (page - 1) * limit;
    // --- Auto-update ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
    await pool.execute(`
      UPDATE bookings
      SET status = '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      WHERE status = '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß'
      AND CONCAT(date, ' ', SUBSTRING_INDEX(time_slot, '-', -1)) <= NOW()
    `);

    // --- Confirm booking ---
    const confirmId = url.searchParams.get("confirmId");
    let updatedStatus: string | null = null;
    if (confirmId) {
      const [bookingRows]: any = await pool.execute(
        "SELECT id, time_slot, date FROM bookings WHERE id = ?",
        [confirmId]
      );
      const booking = bookingRows[0];
      if (booking) {
        const [result]: any = await pool.execute(
          `
          UPDATE bookings
          SET status = CASE
            WHEN CONCAT(date, ' ', SUBSTRING_INDEX(time_slot, '-', -1)) <= NOW() THEN '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
            ELSE '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß'
          END
          WHERE id = ?
        `,
          [confirmId]
        );
        if (result.affectedRows > 0) {
          const [updatedRows]: any = await pool.execute(
            "SELECT status FROM bookings WHERE id = ?",
            [confirmId]
          );
          updatedStatus = updatedRows[0].status;
        }
      }
    }

    // --- Query ‡∏´‡∏•‡∏±‡∏Å ---
    let query = `
      SELECT id, provider, name, phone, therapist, time_slot, date, status, payment_status, created_at
      FROM bookings
      WHERE 1=1
    `;
    let countQuery = `SELECT COUNT(*) AS total FROM bookings WHERE 1=1`;
    const queryParams: any[] = [];
    const countParams: any[] = [];

    // --- ‡πÅ‡∏õ‡∏•‡∏á filterStatus ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‚Üí ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    const statusMap: Record<string, string> = {
      upcoming: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
      in_queue: "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß",
      past: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      cancelled: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    };
    const dbStatus = statusMap[filterStatus] || "";

    // --- Apply filters ---
    if (filterDate && filterDate !== "all") {
      query += ` AND date = ?`;
      countQuery += ` AND date = ?`;
      queryParams.push(filterDate);
      countParams.push(filterDate);
    }
    if (filterTimeSlot && filterTimeSlot !== "all") {
          query += `
            AND REPLACE(REPLACE(TRIM(time_slot), '‚Äì', '-'), ' ', '') = REPLACE(?, ' ', '')`;
          countQuery += `
            AND REPLACE(REPLACE(TRIM(time_slot), '‚Äì', '-'), ' ', '') = REPLACE(?, ' ', '')`;
          queryParams.push(filterTimeSlot.trim());
          countParams.push(filterTimeSlot.trim());
        }
   
    if (filterProvider && filterProvider !== "all") {
      query += ` AND provider = ?`;
      countQuery += ` AND provider = ?`;
      queryParams.push(filterProvider);
      countParams.push(filterProvider);
    }
    if (filterTherapist && filterTherapist !== "all") {
      query += ` AND therapist = ?`;
      countQuery += ` AND therapist = ?`;
      queryParams.push(filterTherapist);
      countParams.push(filterTherapist);
    }
    if (dbStatus && dbStatus !== "all") {
      query += ` AND status = ?`;
      countQuery += ` AND status = ?`;
      queryParams.push(dbStatus);
      countParams.push(dbStatus);
    }

    if (!isExport) { // üéØ ‡πÉ‡∏ä‡πâ LIMIT ‡πÅ‡∏•‡∏∞ OFFSET ‡πÄ‡∏°‡∏∑‡πà‡∏≠ '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà' ‡πÇ‡∏´‡∏°‡∏î Export ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        query += `
            ORDER BY 
              date ASC,
              STR_TO_DATE(SUBSTRING_INDEX(time_slot, '-', 1), '%H:%i') ASC,
              name ASC
            LIMIT ? OFFSET ?
        `;
        queryParams.push(limit, offset);
    } else {
        query += `
            ORDER BY 
              date ASC,
              STR_TO_DATE(SUBSTRING_INDEX(time_slot, '-', 1), '%H:%i') ASC,
              name ASC
        `;
    }


    // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    const [rows]: any = await pool.execute(query, queryParams);
    const [countRows]: any = await pool.execute(countQuery, countParams);

    const total = countRows[0]?.total || 0;
    const totalPages = Math.ceil(total / limit);
    
 // --- Summary (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ‡∏ï‡∏≤‡∏° filter ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô) ---
      let summaryCondition = "";
      const summaryParams: any[] = [];

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô countQuery ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ LIMIT/OFFSET
      if (filterDate && filterDate !== "all") {
        summaryCondition += " AND date = ?";
        summaryParams.push(filterDate);
      }
      if (filterTimeSlot && filterTimeSlot !== "all") {
        summaryCondition += " AND REPLACE(REPLACE(TRIM(time_slot), '‚Äì', '-'), ' ', '') = REPLACE(?, ' ', '')";
        summaryParams.push(filterTimeSlot.trim());
      }
      if (filterProvider && filterProvider !== "all") {
        summaryCondition += " AND provider = ?";
        summaryParams.push(filterProvider);
      }
      if (filterTherapist && filterTherapist !== "all") {
        summaryCondition += " AND therapist = ?";
        summaryParams.push(filterTherapist);
      }           

      
      // --- Query summary ‡∏Ñ‡∏£‡∏ö 4 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
      const attendedQuery = `SELECT COUNT(*) AS totalAttended FROM bookings WHERE status = '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' ${summaryCondition}`;
      const cancelledQuery = `SELECT COUNT(*) AS totalCancelled FROM bookings WHERE status = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ${summaryCondition}`;
      const pendingQuery = `SELECT COUNT(*) AS totalPending FROM bookings WHERE status = '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' ${summaryCondition}`;
      const inQueueQuery = `SELECT COUNT(*) AS totalInQueue FROM bookings WHERE status = '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß' ${summaryCondition}`;


      const [attendedRows]: any = await pool.execute(attendedQuery, summaryParams.slice());
      const [cancelledRows]: any = await pool.execute(cancelledQuery, summaryParams.slice());
      const [pendingRows]: any = await pool.execute(pendingQuery, summaryParams.slice());
      const [inQueueRows]: any = await pool.execute(inQueueQuery, summaryParams.slice());

      const totalAttended = Number(attendedRows?.[0]?.totalAttended) || 0;
      const totalCancelled = Number(cancelledRows?.[0]?.totalCancelled) || 0;
      const totalPending = Number(pendingRows?.[0]?.totalPending) || 0;
      const totalInQueue = Number(inQueueRows?.[0]?.totalInQueue) || 0;

    // --- Average per month ---
    const now = new Date();
    const year = now.getFullYear();
    const [avgRows]: any = await pool.execute(
      "SELECT COUNT(*) / 12 AS avg_per_month FROM bookings WHERE YEAR(date) = ?",
      [year]
    );
    const avgPerMonth = avgRows[0]?.avg_per_month || 0;

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    return NextResponse.json({
      success: true,
      bookings: rows,
      updatedStatus,
      avgPerMonth,
      pagination: { page, limit, total, totalPages },
      summary: { totalAttended, totalCancelled, totalPending, totalInQueue },
    });
  } catch (error) {
    console.error("Error fetching bookings:", error);
    return NextResponse.json(
      { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ" },
      { status: 500 }
    );
  }
}

// üóëÔ∏è DELETE: ‡∏•‡∏ö booking
export async function DELETE(req: Request) {
  try {
    const url = new URL(req.url);
    const id = url.searchParams.get("id");
    if (!id)
      return NextResponse.json({ success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö id" }, { status: 400 });

    await pool.execute("DELETE FROM bookings WHERE id = ?", [id]);
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Error deleting booking:", error);
    return NextResponse.json(
      { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" },
      { status: 500 }
    );
  }
}

// üí≥ POST: mark payment
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { id } = body;
    if (!id)
      return NextResponse.json({ success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö id" }, { status: 400 });

    await pool.execute("UPDATE bookings SET payment_status = 'paid' WHERE id = ?", [id]);
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Error updating payment status:", error);
    return NextResponse.json(
      { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ" },
      { status: 500 }
    );
  }
}
