// ‡πÄ‡∏õ‡πá‡∏ô API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞ session ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import mysql from "mysql2/promise";

const pool = mysql.createPool({
  host: "lmwcc.synology.me",
  user: "medthai",
  password: "I4FEtUu*-uB-hAK0",
  database: "medthai",
});

export async function GET() {
  const cookieStore = await cookies(); // üëà ‡πÉ‡∏ä‡πâ await ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
  const sessionToken = cookieStore.get("session")?.value;

  if (!sessionToken) {
    return NextResponse.json(
      { success: false, error: "‡πÑ‡∏°‡πà‡∏°‡∏µ session" },
      { status: 401 }
    );
  }

  const conn = await pool.getConnection();
  const [rows] = await conn.query(
    `SELECT users.id, users.name, users.email, users.phone, users.role 
     FROM sessions 
     JOIN users ON sessions.user_id = users.id 
     WHERE sessions.token = ?`,
    [sessionToken]
  );
  conn.release();

  if ((rows as any).length === 0) {
    return NextResponse.json(
      { success: false, error: "session ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
      { status: 401 }
    );
  }

  const user = (rows as any)[0];
  return NextResponse.json({ success: true, user });
}
